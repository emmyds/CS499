package untitledslideshow;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Roberto Murcia
 */
import java.awt.CardLayout;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;
import javax.swing.ImageIcon;
public class MightyPointGui extends javax.swing.JFrame {
    
    /**
     * Creates new form MightyPointGUI
     */
    private boolean isManual;
    private boolean isInterval;
    private int intervalTime;
    private String saveDirectory;
    private String imageDirectory;
    private ArrayList<ImageItem> images;
    public static final Exporter exporter = new Exporter();
    
    public MightyPointGui() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manualIntervalButton = new javax.swing.ButtonGroup();
        slideshowTitleLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        filenameTextBox = new javax.swing.JTextField();
        mainTabbedPane = new javax.swing.JTabbedPane();
        imagesPanel = new javax.swing.JPanel();
        imagesScrollPane = new javax.swing.JScrollPane();
        imagesList = new javax.swing.JList<>();
        imagesList = new javax.swing.JList<>();
        soundsPanel = new javax.swing.JPanel();
        soundSelectButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        iconPanel = new javax.swing.JPanel();
        soundsSlidesPanel = new javax.swing.JScrollPane();
        soundsSlidesList = new javax.swing.JList<>();
        extraSettingsPanel = new javax.swing.JPanel();
        manualButton = new javax.swing.JRadioButton();
        intervalButton = new javax.swing.JRadioButton();
        intervalLabel = new javax.swing.JLabel();
        intervalSpinner = new javax.swing.JSpinner();
        transitionSettingsPanel = new javax.swing.JPanel();
        transitionLengthSpinner = new javax.swing.JSpinner();
        transitionLengthLabel = new javax.swing.JLabel();
        slideShowReelPanel = new javax.swing.JPanel();
        reelScrollPane = new javax.swing.JScrollPane();
        imagesReel = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("mainFrame");
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(1200, 800));
        setName("mainFrame"); // NOI18N
        setSize(new java.awt.Dimension(0, 0));

        slideshowTitleLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        slideshowTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        slideshowTitleLabel.setText("Untitled Slideshow Editor");
        slideshowTitleLabel.setMinimumSize(new java.awt.Dimension(250, 250));

        saveButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saveButton.setText("Save and Export");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        ((AbstractDocument) filenameTextBox.getDocument()).setDocumentFilter(new InputFilter());
        filenameTextBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        mainTabbedPane.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        imagesList.setModel(new javax.swing.DefaultListModel<String>() {
            String[] imageStrings = {null};
            public int getSize() { return imageStrings.length; }
            public String getElementAt(int i) { return imageStrings[i]; }
        });
        imagesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        imagesList.setToolTipText("");
        imagesList.setAutoscrolls(false);
        imagesList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        imagesList.setDragEnabled(true);
        imagesList.setDropMode(javax.swing.DropMode.ON);
        imagesList.setFixedCellHeight(175);
        imagesList.setFixedCellWidth(175);
        imagesList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        imagesList.setName("imagesList"); // NOI18N
        imagesList.setSelectionBackground(new java.awt.Color(0, 51, 153));
        imagesList.setVisibleRowCount(1);
        imagesScrollPane.setViewportView(imagesList);
        imagesList.getAccessibleContext().setAccessibleName("");
        imagesList.addMouseListener(new ClickListener());

        javax.swing.GroupLayout imagesPanelLayout = new javax.swing.GroupLayout(imagesPanel);
        imagesPanel.setLayout(imagesPanelLayout);
        imagesPanelLayout.setHorizontalGroup(
            imagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagesScrollPane)
                .addContainerGap())
        );
        imagesPanelLayout.setVerticalGroup(
            imagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Images", imagesPanel);

        soundSelectButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        soundSelectButton.setText("Import Sound File");
        soundSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundSelectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout soundsPanelLayout = new javax.swing.GroupLayout(soundsPanel);
        soundsPanel.setLayout(soundsPanelLayout);
        soundsPanelLayout.setHorizontalGroup(
            soundsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(soundsPanelLayout.createSequentialGroup()
                .addGap(268, 268, 268)
                .addComponent(soundSelectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(353, Short.MAX_VALUE))
        );
        soundsPanelLayout.setVerticalGroup(
            soundsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(soundsPanelLayout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(soundSelectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Sounds", soundsPanel);

        exitButton.setText("X");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout iconPanelLayout = new javax.swing.GroupLayout(iconPanel);
        iconPanel.setLayout(iconPanelLayout);
        iconPanelLayout.setHorizontalGroup(
            iconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        iconPanelLayout.setVerticalGroup(
            iconPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        soundsSlidesList.setToolTipText("This is the soundtrack Reel.");
        soundsSlidesList.setDragEnabled(true);
        soundsSlidesList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        soundsSlidesPanel.setViewportView(soundsSlidesList);

        extraSettingsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        manualIntervalButton.add(manualButton);
        manualButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        manualButton.setSelected(true);
        manualButton.setText("Manual Slides");

        manualIntervalButton.add(intervalButton);
        intervalButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        intervalButton.setText("Interval");
        intervalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intervalButtonActionPerformed(evt);
            }
        });

        intervalLabel.setText("User interval or manual selection");

        intervalSpinner.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        intervalSpinner.setMaximumSize(new java.awt.Dimension(0, 10));
        intervalSpinner.setName(""); // NOI18N

        transitionSettingsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        transitionLengthLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        transitionLengthLabel.setText("Transition Length");

        javax.swing.GroupLayout transitionSettingsPanelLayout = new javax.swing.GroupLayout(transitionSettingsPanel);
        transitionSettingsPanel.setLayout(transitionSettingsPanelLayout);
        transitionSettingsPanelLayout.setHorizontalGroup(
            transitionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, transitionSettingsPanelLayout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .addComponent(transitionLengthLabel)
                .addGap(18, 18, 18)
                .addComponent(transitionLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        transitionSettingsPanelLayout.setVerticalGroup(
            transitionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(transitionSettingsPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(transitionSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transitionLengthLabel)
                    .addComponent(transitionLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout extraSettingsPanelLayout = new javax.swing.GroupLayout(extraSettingsPanel);
        extraSettingsPanel.setLayout(extraSettingsPanelLayout);
        extraSettingsPanelLayout.setHorizontalGroup(
            extraSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(extraSettingsPanelLayout.createSequentialGroup()
                .addGroup(extraSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(extraSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(intervalLabel)
                        .addGroup(extraSettingsPanelLayout.createSequentialGroup()
                            .addComponent(intervalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(intervalSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(manualButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(transitionSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        extraSettingsPanelLayout.setVerticalGroup(
            extraSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, extraSettingsPanelLayout.createSequentialGroup()
                .addComponent(intervalLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(extraSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(transitionSettingsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(extraSettingsPanelLayout.createSequentialGroup()
                        .addGroup(extraSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(intervalButton)
                            .addComponent(intervalSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(manualButton)))
                .addContainerGap())
        );

        slideShowReelPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        slideShowReelPanel.setPreferredSize(new java.awt.Dimension(1182, 178));

        imagesReel.setFixedCellHeight(175);
        imagesReel.setFixedCellWidth(175);
        imagesReel.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        imagesReel.setName("imagesReel"); // NOI18N
        imagesReel.setVisibleRowCount(1);
        reelScrollPane.setViewportView(imagesReel);
        imagesReel.addMouseListener(new ClickListener());
        imagesReel.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout slideShowReelPanelLayout = new javax.swing.GroupLayout(slideShowReelPanel);
        slideShowReelPanel.setLayout(slideShowReelPanelLayout);
        slideShowReelPanelLayout.setHorizontalGroup(
            slideShowReelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slideShowReelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reelScrollPane)
                .addContainerGap())
        );
        slideShowReelPanelLayout.setVerticalGroup(
            slideShowReelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(slideShowReelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reelScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(slideshowTitleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(iconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(filenameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(soundsSlidesPanel)
                    .addComponent(mainTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(extraSettingsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(slideShowReelPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1184, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iconPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(slideshowTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filenameTextBox)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(slideShowReelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(soundsSlidesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(extraSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Gives the user the option to have slides transition with a given interval
     * @param evt is the event of the user selecting the interval radio option
     */
    private void intervalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intervalButtonActionPerformed
        isInterval = true;
        intervalTime = (Integer) intervalSpinner.getValue();
        System.out.print(intervalTime);
    }//GEN-LAST:event_intervalButtonActionPerformed
    /**
     * Allows the user to exit the program
     * @param evt is the event of the user clicking the exit button
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        JFrame onExitFrame = new JFrame("Exit Menu");
        onExitFrame.setSize(200,200);
        onExitFrame.setLocationRelativeTo(this);
        onExitFrame.setAlwaysOnTop(true);
        int result = JOptionPane.showConfirmDialog(onExitFrame, "Please confirm that you have saved your slideshow first! "
               + "Would you like to exit anyway?");
        switch(result){
            case JOptionPane.YES_OPTION:
                System.out.println("\nExiting Now\n");
                System.exit(1);
            case JOptionPane.NO_OPTION:
                System.out.println("\nClosing Exit Dialog\n");
                break;
            case JOptionPane.CANCEL_OPTION:
                System.out.println("\nExit Dialog Cancelled\n");
                break;
            case JOptionPane.CLOSED_OPTION:
                System.out.println("\nExit Dialog Closed\n");
       }
    }//GEN-LAST:event_exitButtonActionPerformed

   
   /**
     * Allows the user to save a file that can be opened in the companion application
     * Will also create a folder in the project directory for saved slideshows if not present already
     * @param evt is the event of the user clicking on the Save button
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        exporter.export();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void soundSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundSelectButtonActionPerformed
        File soundDirectory = null;
        JFileChooser soundFileChooser = new JFileChooser();
        soundFileChooser.setDialogTitle("Choose a sound file to add to your slide show!");
        soundFileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        soundFileChooser.showOpenDialog(this);
        soundDirectory = soundFileChooser.getSelectedFile();
        File fileDirectories[] = soundDirectory.listFiles();
        int counter = 0;
        PathMatcher matcher = FileSystems.getDefault().getPathMatcher("regex:^.*\\.wav");
        PathMatcher matcher2 = FileSystems.getDefault().getPathMatcher("regex:^.*\\.aiff");
        ArrayList<String> soundPaths = new ArrayList<>();
        try{
            for (File fileDirectory : fileDirectories) {
                Path filePath = fileDirectory.toPath();
                if (matcher.matches(filePath) || matcher2.matches(filePath)){
                    counter++;
                    System.out.print("Item name: " + filePath + " is a sound!\n");
                    soundPaths.add(filePath.toString());
                }
                else{
                    System.out.print("\nIndex: " + filePath + " is not a sound\n");
                }
            }
        }
        catch(NullPointerException exception){
            System.out.print("An exception was found at index: " + counter);
        }

        /*
            ArrayList<DisplayImage> soundName = new ArrayList<>();
            for(String soundPath : soundPaths){
            DisplayImage newSound = new DisplayImage();
            newSound.setImagePath(soundPath);
            soundName.add(newSound);
        }
        */
        
       
    }//GEN-LAST:event_soundSelectButtonActionPerformed
//    public ArrayList<ImageItem> getImages(){
//        return this.images;
//    }
    /**
     * Main will begin by providing a popup, asking the user if they would like to
     * create a new slideshow, or import an old one. The editor should not open unless
     * an option is chosen by the user. Once a directory is chosen, all available .jpg files
     * will be found and put into ArrayList imagePaths. From there, this list can be sent to
     * various classes that will provide thumbnails, along with creating Item objects for these
     * images.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
        Creation of the frame for the popup
        */
        MightyPointGui mainGui = new MightyPointGui();
        FirstPopUp popUp = new FirstPopUp();
        popUp.createPop();
        ArrayList<DisplayImage> thumbImages = null;
        while(true){
            thumbImages = popUp.getArrayList();
            if(thumbImages != null){
                break;
            }
            try {
               Thread.sleep(100); 
            }
            catch(InterruptedException ex){
                
            }
        }
        System.out.println("Left PopUp");
        DefaultListModel dlm = new DefaultListModel();
        int i = 0;
        for (DisplayImage listImage : thumbImages) {
            ImageIcon newImg = listImage.getImage();
            newImg.setDescription(listImage.getImagePath());
            System.out.println(newImg.getDescription());
            dlm.add(i, listImage.getImage());
            i++;
        }
        
        mainGui.imageDirectory = popUp.getImageDirectory();
        mainGui.imagesList.setModel(dlm);
        
        /* Cell Renderer Shenanigans
        ElementRenderer renderer = new ElementRenderer();
        mainGui.imagesList.setCellRenderer(renderer);
        */
        
        mainGui.slideShowReelPanel.setLayout(new CardLayout());

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            mainGui.setVisible(true);
            ClickPopUp updateGUI = new ClickPopUp(mainGui.imagesReel);
            mainGui.imagesReel.setModel(updateGUI.getDLM());
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JPanel extraSettingsPanel;
    private javax.swing.JTextField filenameTextBox;
    private javax.swing.JPanel iconPanel;
    protected javax.swing.JList<String> imagesList;
    private javax.swing.JPanel imagesPanel;
    protected javax.swing.JList<String> imagesReel;
    private javax.swing.JScrollPane imagesScrollPane;
    private javax.swing.JRadioButton intervalButton;
    private javax.swing.JLabel intervalLabel;
    private javax.swing.JSpinner intervalSpinner;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JRadioButton manualButton;
    private javax.swing.ButtonGroup manualIntervalButton;
    private javax.swing.JScrollPane reelScrollPane;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel slideShowReelPanel;
    private javax.swing.JLabel slideshowTitleLabel;
    private javax.swing.JButton soundSelectButton;
    private javax.swing.JPanel soundsPanel;
    private javax.swing.JList<String> soundsSlidesList;
    private javax.swing.JScrollPane soundsSlidesPanel;
    private javax.swing.JLabel transitionLengthLabel;
    private javax.swing.JSpinner transitionLengthSpinner;
    private javax.swing.JPanel transitionSettingsPanel;
    // End of variables declaration//GEN-END:variables
}
